import logging
import pandas

from django.utils.translation import ugettext
from hashlib import blake2b

from ..models import Entry, Repository

logger = logging.getLogger(__name__)


class ChrFeatureParser(object):
    def __init__(self, file_path, database_name, root_url, skip_rows=0):

        self.file_path = file_path
        self.database_name = database_name
        self.root_url = root_url
        self.features = None
        self.skip_rows = skip_rows
        self.entries = {
            'new': [],
            'update': [],
        }

    def _get_headers(self):
        """
        This method MUST return the ordered column names of the file to parse
        as a tuple. All the column names have to be supplied and the following
        values are expected:

            - aliases
            - description
            - id
            - name
        """
        raise NotImplementedError(
            ugettext(
                "You should define the _get_headers() method on your parser."
            )
        )

    def parse(self):
        self.features = pandas.read_table(
            self.file_path,
            header=None,
            names=self._get_headers(),
            skiprows=self.skip_rows
        )

    def _to_entries(self, ignore_aliases):

        if self.features is None:
            return

        repository, _ = Repository.objects.get_or_create(
            name=self.database_name
        )
        known_entries = repository.entries.values_list('identifier', flat=True)
        entries = {
            'update': [],
            'new': [],
        }

        for idx, feature in self.features.iterrows():
            url = '{}{}'.format(self.root_url, feature['id'])
            aliases = []

            if pandas.isna(feature['name']):
                logger.warning(f'Invalid feature name for id={id}')
                continue

            if not pandas.isna(feature['aliases']) and not ignore_aliases:
                aliases = filter(
                    lambda a: len(a) <= 100,
                    map(str, feature['aliases'].split('|'))
                )

            for identifier in (str(feature['name']), *aliases):

                # The Entry primary key is precomputed given an identifier and
                # a repository. By doing so, we will be able to create a set()
                # to remove duplicates potentially generated by aliases.
                pk = blake2b(
                    bytes(
                        '/'.join((identifier, repository.pk.hex)),
                        encoding='utf8'
                    ),
                    digest_size=16
                ).hexdigest()

                entry = Entry(
                    pk=pk,
                    identifier=identifier,
                    description=feature['description'],
                    url=url,
                    repository=repository,
                )

                if identifier in known_entries:
                    entries['update'].append(entry)
                else:
                    entries['new'].append(entry)

        self.entries['new'] = list(set(entries.get('new')))
        self.entries['update'] = list(set(entries.get('update')))

    def save(self, ignore_aliases=True):

        self._to_entries(ignore_aliases=ignore_aliases)

        # Create new entries
        Entry.objects.bulk_create(self.entries['new'], batch_size=500)

        # Update old entries
        for updated_entry in self.entries['update']:
            entry = Entry.objects.get(
                identifier=updated_entry.identifier,
                repository=updated_entry.repository
            )
            entry.description = updated_entry.description
            entry.save(update_fields=['description', ])


class CGDParser(ChrFeatureParser):
    """
    Expected columns:

    (A) 1.  Feature name (mandatory); this is the primary systematic name,
        if available
    (B) 2.  Gene name (locus name)
    (C) 3.  Aliases (multiples separated by |)
    (D) 4.  Feature type
    (E) 5.  Chromosome
    (F) 6.  Start Coordinate
    (G) 7.  Stop Coordinate
    (H) 8.  Strand
    (I) 9.  Primary CGDID
    (J) 10. Secondary CGDID (if any)
    (K) 11. Description
    (L) 12. Date Created
    (M) 13. Sequence Coordinate Version Date (if any)
    (N) 14. Blank
    (O) 15. Blank
    (P) 16. Date of gene name reservation (if any).
    (Q) 17. Has the reserved gene name become the standard name? (Y/N)
    (R) 18. Name of S. cerevisiae ortholog(s) (multiples separated by |)
    """

    def __init__(self, file_path):
        super().__init__(
            file_path,
            database_name='CGD',
            root_url='http://www.candidagenome.org/cgi-bin/locus.pl?dbid=',
            # A CGD file contains a "header" content at the top of the file (8
            # lines)
            skip_rows=8
        )

    def _get_headers(self):
        return (
            'name',  # A
            'locus',  # B
            'aliases',  # C
            'type',  # D
            'chromosome',  # E
            'start',  # F
            'stop',  # G
            'strand',  # H
            'id',  # I (cgdid)
            'cgdid_2',  # J
            'description',  # K
            'created',  # L
            'crd_versionned',  # M
            'blk_1',  # N
            'blk_2',  # O
            'reserved',  # P
            'is_standard',  # Q
            'orthologs',  # R
        )


class SGDParser(ChrFeatureParser):
    """
    Expected columns:

    (A) 1.   Primary SGDID (mandatory)
    (B) 2.   Feature type (mandatory)
    (C) 3.   Feature qualifier (optional)
    (D) 4.   Feature name (optional)
    (E) 5.   Standard gene name (optional)
    (F) 6.   Alias (optional, multiples separated by |)
    (G) 7.   Parent feature name (optional)
    (H) 8.   Secondary SGDID (optional, multiples separated by |)
    (I) 9.   Chromosome (optional)
    (J) 10.  Start_coordinate (optional)
    (K) 11.  Stop_coordinate (optional)
    (L) 12.  Strand (optional)
    (M) 13.  Genetic position (optional)
    (N) 14.  Coordinate version (optional)
    (O) 15.  Sequence version (optional)
    (P) 16.  Description (optional)
    """

    def __init__(self, file_path):
        super().__init__(
            file_path,
            database_name='SGD',
            root_url='https://www.yeastgenome.org/locus/'
        )

    def _get_headers(self):
        return (
            'id',  # A (sgdid)
            'feature_type',  # B
            'feature_qualifier',  # C
            'name',  # D (feature name)
            'gene_name',  # E
            'aliases',  # F (alias)
            'parent_feature_name',  # G
            'sgdid_2',  # H
            'chromosome',  # I
            'start',  # J
            'stop',  # K
            'strand',  # L
            'position',  # M
            'coordinate_version',  # N
            'sequence_version',  # O
            'description',  # P
        )
