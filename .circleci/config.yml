version: 2
jobs:

  frontend-build:
    working_directory: ~/pixel
    docker:
      - image: circleci/node:8
        environment:
          CI_BUILD_FRONTEND: 1
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-deps-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies & build styles
          command: make bootstrap
      - save_cache:
          paths:
            - ~/pixel/static
            - ~/pixel/node_modules
          key: frontend-deps-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  backend-build:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-deps-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Login to DockerHub
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
      - run:
          name: Build container
          command: docker build -t "candihub/pixel:$CIRCLE_BRANCH" .
      - run:
          name: Publish container
          command: docker push "candihub/pixel:$CIRCLE_BRANCH"

  docker-tag:
    machine: true
    steps:
      - run:
          name: Login to DockerHub
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
      - run:
          name: Tag container
          command: docker tag "candihub/pixel:$CIRCLE_BRANCH" "candihub/pixel:$(bin/ci --get-docker-tag)"
      - run:
          name: Publish tagged container
          command: docker push "candihub/pixel:$(bin/ci --get-docker-tag)"

  backend-build-dev:
    working_directory: /app/pixel
    docker:
      - image: candihub/pixel:$CIRCLE_BRANCH
    steps:
      - restore_cache:
          keys:
            - backend-dev-deps-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install development dependencies
          command: make install-ci
      - save_cache:
          paths:
            - ~/.local/share/virtualenvs
          key: backend-dev-deps-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

  backend-lint:
    working_directory: /app/pixel
    docker:
      - image: candihub/pixel:$CIRCLE_BRANCH
    steps:
      - restore_cache:
          keys:
            - backend-dev-deps-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Lint the code
          command: make lint-ci

  backend-test:
    working_directory: /app/pixel
    docker:
      - image: candihub/pixel:$CIRCLE_BRANCH
        environment:
          DJANGO_SETTINGS_MODULE: pixel.settings
          DJANGO_CONFIGURATION: Test
          DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestingPurposeOnly
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: pixel
          POSTGRES_USER: pixel
          POSTGRES_PASSWORD: pixel42
      - image: postgres:9.6
        environment:
          POSTGRES_DB: pixel
          POSTGRES_USER: pixel
          POSTGRES_PASSWORD: pixel42
    steps:
      - restore_cache:
          keys:
            - backend-dev-deps-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Add $HOME/bin to the PATH
          command: |
            mkdir "$HOME"/bin
            echo "export PATH=$HOME/bin:$PATH" >> "$BASH_ENV"
      - run:
          name: Install dockerize
          command: bin/ci --install-dockerize
      - run:
          # NB: we need to wait for the postgresl database to be created before
          # running tests
          name: Wait for db
          command: dockerize -wait tcp://"$POSTGRES_HOST":"$POSTGRES_PORT" -timeout 1m
      - run:
          name: Test the code
          command: make test-ci
      - run:
          name: Create git repository
          command: bin/ci --set-git-repo
          when: on_success
      - run:
          name: Report code coverage
          command: make coverage-ci

workflows:
  version: 2

  pixel:
    jobs:
      - frontend-build
      - backend-build:
          requires:
            - frontend-build
      - backend-build-dev:
          requires:
            - backend-build
      - backend-lint:
          requires:
            - backend-build-dev
      - backend-test:
          requires:
            - backend-build-dev
      - docker-tag:
          requires:
            - backend-test
            - backend-lint
          filters:
            tags:
              only: /.*/
            branches:
              only: master
