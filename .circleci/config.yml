version: 2
jobs:
  frontend-build:
    working_directory: ~/pixel
    docker:
      - image: circleci/node:8
        environment:
          CI_BUILD_FRONTEND: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-v3-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies & build styles
          command: make bootstrap
      - run:
          name: Checksum compiled styles
          command: sha256sum static/css/main.css
      - save_cache:
          paths:
            - ~/pixel/node_modules
          key: frontend-deps-v3-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - save_cache:
          paths:
            - ~/pixel/static
          key: frontend-statics-v1-{{ .Revision }}

  backend-build:
    machine: true
    working_directory: ~/pixel
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-statics-v1-{{ .Revision }}
      - run:
          name: Check built styles
          command: sha256sum static/css/main.css
      - restore_cache:
          keys:
            - docker-v2-{{ .Revision }}
      - run:
          name: Load cached container
          command: |
            if [[ -e ~/docker/pixel.tgz ]]
            then
              gunzip -c ~/docker/pixel.tgz | docker load
            fi
      - run:
          name: Build container
          command: |
            docker build --pull --no-cache -t pixel \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION=`cat VERSION` .
      - run:
          name: Check embedded styles
          command: |
            docker run --rm pixel cat public/static/css/main.css | sha256sum
      - run:
          name: Save container
          command: |
            mkdir -p ~/docker
            docker save pixel | gzip > ~/docker/pixel.tgz
      - save_cache:
          paths:
            - ~/docker
          key: docker-v2-{{ .Revision }}

  backend-test:
    machine: true
    working_directory: ~/pixel
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-statics-v1-{{ .Revision }}
      - run:
          name: Lint the code
          command: make lint
      - run:
          name: Test the code & report coverage
          command: |
            set -x
            make test-ci

  hub:
    machine: true
    steps:
      - restore_cache:
          keys:
            - docker-v2-{{ .Revision }}
      - run:
          name: Load cached container
          command: gunzip -c ~/docker/pixel.tgz | docker load
      - run:
          name: Login to DockerHub
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
      - run:
          name: Get Docker tag
          command: echo 'export DOCKER_TAG=$(if [[ -z "$CIRCLE_TAG" ]]; then echo "latest"; else echo "$CIRCLE_TAG"; fi)' >> "$BASH_ENV"
      - run:
          name: Tag container
          command: |
            echo "Docker tag: $DOCKER_TAG"
            docker tag pixel "candihub/pixel:$DOCKER_TAG"
      - run:
          name: Double check embedded styles
          command: |
            docker run --rm "candihub/pixel:$DOCKER_TAG" cat public/static/css/main.css | sha256sum
      - run:
          name: Publish tagged container
          command: docker push "candihub/pixel:$DOCKER_TAG"

  deploy-to-staging:
    machine: true
    steps:
      - run:
          name: Run bin/deploy over SSH
          command: ssh -t pixel@candihub.eu 'cd ~/staging/ && sudo bin/deploy'

workflows:
  version: 2

  pixel:
    jobs:
      - frontend-build:
          filters:
            tags:
              only: /.*/
      - backend-build:
          requires:
            - frontend-build
          filters:
            tags:
              only: /.*/
      - backend-test:
          requires:
            - backend-build
          filters:
            tags:
              only: /.*/
      - hub:
          requires:
            - backend-test
          filters:
            tags:
              only: /.*/
            branches:
              only: master
      - deploy-to-staging:
          requires:
            - hub
          filters:
            branches:
              only: master
